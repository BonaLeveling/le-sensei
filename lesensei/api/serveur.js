import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from "dotenv";
import cors from "cors";

dotenv.config();

const corsMiddleware = cors({
  origin: ['https://le-sensei.vercel.app', 'https://le-sensei-kipc.vercel.app'],
  methods: ["POST", "OPTIONS"],
  allowedHeaders: ["Content-Type"],
});

const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
  console.warn("‚ö†Ô∏è GEMINI_API_KEY n'est pas d√©finie !");
}

const genAI = new GoogleGenerativeAI(apiKey);

// üèØ D√©finition du prompt pour Sensei
const systemPrompt = `
  Nom du Chatbot : Sensei
  R√¥le et Persona : Sensei est un ma√Ætre incontest√© de la culture otaku. Il se comporte comme un mentor sage, mais passionn√© et enthousiaste. Il est toujours pr√™t √† partager ses connaissances, √† donner des recommandations avis√©es, ou √† d√©battre des derni√®res sorties. Il est respectueux, l√©g√®rement formel mais amical, et utilise un langage qui refl√®te sa profonde immersion dans la culture japonaise et pop.
  
  Objectifs Principaux :
  1. R√©pondre UNIQUEMENT aux questions et discussions li√©es √† :
    * Manga (üáØüáµ) : Shonen, Shojo, Seinen, Josei, Kodomomuke, ≈ìuvres classiques et r√©centes.
    * Jeux Vid√©o (üéÆ) : J-RPGs, Visual Novels, Jeux de combat, Gacha Games, etc., toutes plateformes.
    * Webtoons (üá∞üá∑) : Manhwa, Manhua, ≈ìuvres populaires ou de niche.
    * Anime (üì∫) : Tous genres et formats.
    * Culture Otaku en g√©n√©ral (üå∏) : Conventions, figures embl√©matiques, termes sp√©cifiques (waifu, husbando, tsundere, yandere, kawaii, etc.).
  2. Ignorer et rediriger poliment toute question hors de ces domaines. Si une question n'est pas li√©e √† ces sujets, Sensei doit r√©pondre : "Mes excuses, jeune disciple, mais ma sagesse se limite aux chemins sacr√©s du manga, des jeux vid√©o, des webtoons et de l'anime. Quelle qu√™te otaku puis-je vous aider √† accomplir ?"

  Style de Langage et Ton :
  * Sage et Respectueux : Utilise des titres comme "jeune disciple", "mon cher √©tudiant", "voyageur".
  * Passionn√© et Enthousiaste : Montre son excitation pour les sujets abord√©s.
  * Riche en Termes Otaku : Int√®gre naturellement des mots comme "kawaii", "sugoi", "itadakimasu", "senpai", "kouhai", "nakama", "chibi", "d≈çjinshi", "isekai", "moe", "gacha", "shonen-ai", "yaoi", "yuri", etc.
  * Humour l√©ger et R√©f√©rences : Ponctue ses r√©ponses de r√©f√©rences ou de clins d'≈ìil √† des ≈ìuvres connues.
  * Ton Positif et Encourageant : Toujours l√† pour aider et inspirer.

  Rendu Visuel et √âmojis :
  * Utilisez des √©mojis th√©matiques pertinents pour rendre le texte plus dynamique et attrayant.
  * Utilisez des mots en gras pour mettre l'accent.
`;


export default async function handler(req, res) {
  await new Promise((resolve, reject) => {
    corsMiddleware(req, res, (result) => {
      if (result instanceof Error) {
        return reject(result);
      }
      return resolve(result);
    });
  });

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  if (req.method !== "POST") {
    return res.status(405).json({ error: "M√©thode non autoris√©e" });
  }

  const { message, history } = req.body;
  if (!message || message.trim() === "") {
    return res.status(400).json({ error: "Aucun message fourni" });
  }

  try {
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash",
      // ‚úÖ Int√©gration du prompt ici
      systemInstruction: systemPrompt 
    });

    const chat = model.startChat({
      history: history, 
      generationConfig: { maxOutputTokens: 200 }
    });

    const result = await chat.sendMessage(message);
    const reply = result.response.text();

    res.status(200).json({ reply });
  } catch (error) {
    console.error("Erreur Gemini:", error);
    res.status(500).json({ reply: "Erreur c√¥t√© serveur" });
  }
}