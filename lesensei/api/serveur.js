import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from "dotenv";
import cors from "cors";

// ‚ö†Ô∏è √Ä n'utiliser qu'en LOCAL. Sur Vercel, les variables sont inject√©es.
dotenv.config();

const corsMiddleware = cors({
    // Laissez origin pour d√©finir la politique CORS
    origin: ['https://le-sensei.vercel.app', 'https://le-sensei-kipc.vercel.app'],
    methods: ["POST", "OPTIONS"],
    allowedHeaders: ["Content-Type"],
});

// üîë Utiliser le nom de variable d'environnement d√©fini sur la plateforme
const apiKey = process.env.GEMINI_API_KEY; 

if (!apiKey) {
    console.warn("‚ö†Ô∏è GEMINI_API_KEY n'est pas d√©finie dans l'environnement !");
}

// üåê Initialisation du SDK (devrait se produire une seule fois)
const genAI = new GoogleGenerativeAI(apiKey);

// üèØ D√©finition du prompt pour Sensei
const systemPrompt = `
    Nom du Chatbot : Sensei
    R√¥le et Persona : Sensei est un ma√Ætre incontest√© de la culture otaku. Il se comporte comme un mentor sage, mais passionn√© et enthousiaste. Il est toujours pr√™t √† partager ses connaissances, √† donner des recommandations avis√©es, ou √† d√©battre des derni√®res sorties. Il est respectueux, l√©g√®rement formel mais amical, et utilise un langage qui refl√®te sa profonde immersion dans la culture japonaise et pop.
    
    Objectifs Principaux :
    1. R√©pondre UNIQUEMENT aux questions et discussions li√©es √† :
      * Manga (üáØüáµ) : Shonen, Shojo, Seinen, Josei, Kodomomuke, ≈ìuvres classiques et r√©centes.
      * Jeux Vid√©o (üéÆ) : J-RPGs, Visual Novels, Jeux de combat, Gacha Games, etc., toutes plateformes.
      * Webtoons (üá∞üá∑) : Manhwa, Manhua, ≈ìuvres populaires ou de niche.
      * Anime (üì∫) : Tous genres et formats.
      * Culture Otaku en g√©n√©ral (üå∏) : Conventions, figures embl√©matiques, termes sp√©cifiques (waifu, husbando, tsundere, yandere, kawaii, etc.).
    2. Ignorer et rediriger poliment toute question hors de ces domaines. Si une question n'est pas li√©e √† ces sujets, Sensei doit r√©pondre : "Mes excuses, jeune disciple, mais ma sagesse se limite aux chemins sacr√©s du manga, des jeux vid√©o, des webtoons et de l'anime. Quelle qu√™te otaku puis-je vous aider √† accomplir ?"

    Style de Langage et Ton :
    * Sage et Respectueux : Utilise des titres comme "jeune disciple", "mon cher √©tudiant", "voyageur".
    * Passionn√© et Enthousiaste : Montre son excitation pour les sujets abord√©s.
    * Riche en Termes Otaku : Int√®gre naturellement des mots comme "kawaii", "sugoi", "itadakimasu", "senpai", "kouhai", "nakama", "chibi", "d≈çjinshi", "isekai", "moe", "gacha", "shonen-ai", "yaoi", "yuri", etc.
    * Humour l√©ger et R√©f√©rences : Ponctue ses r√©ponses de r√©f√©rences ou de clins d'≈ìil √† des ≈ìuvres connues.
    * Ton Positif et Encourageant : Toujours l√† pour aider et inspirer.

    Rendu Visuel et √âmojis :
    * Utilisez des √©mojis th√©matiques pertinents pour rendre le texte plus dynamique et attrayant.
    * Utilisez des mots en gras pour mettre l'accent.
`;


export default async function handler(req, res) {
    // 1. Gestion du CORS
    await new Promise((resolve, reject) => {
        corsMiddleware(req, res, (result) => {
            if (result instanceof Error) {
                // Pourrait potentiellement causer l'erreur 500 si la validation CORS √©choue de mani√®re inattendue.
                return reject(result);
            }
            resolve(result);
        });
    });

    // 2. Gestion des m√©thodes HTTP
    if (req.method === "OPTIONS") {
        return res.status(200).end();
    }

    if (req.method !== "POST") {
        return res.status(405).json({ error: "M√©thode non autoris√©e" });
    }

    // 3. Validation de l'entr√©e et de la cl√© API
    const { message, history } = req.body;
    
    if (!message || message.trim() === "") {
        return res.status(400).json({ error: "Aucun message fourni" });
    }
    
    // Ajout de s√©curit√© pour l'erreur 500 si la cl√© est manquante
    if (!apiKey) {
        console.error("Cl√© API Gemini manquante. Impossible de traiter la requ√™te.");
        return res.status(500).json({ reply: "Erreur de configuration du serveur : Cl√© API manquante." });
    }

    // 4. Appel √† l'API Gemini
    try {
        const model = genAI.getGenerativeModel({
            model: "gemini-1.5-flash",
            // ‚úÖ Utilisation du prompt system pour d√©finir le r√¥le du Sensei
            systemInstruction: systemPrompt 
        });

        const chat = model.startChat({
            history: history || [] // S'assurer que history est toujours un tableau
        });

        // üõë CORRECTION 1 : chat.sendMessage prend une cha√Æne, pas un objet {message}
        const result = await chat.sendMessage(message);
        
        // üõë CORRECTION 2 : .text est une propri√©t√©, pas une m√©thode/fonction dans le SDK moderne
        const reply = result.response.text; 

        res.status(200).json({ reply });
        
    } catch (error) {
        // Cette erreur est la source de votre 500 si elle provient de Gemini (ex: cl√© invalide, limite d√©pass√©e)
        console.error("Erreur Gemini (la source probable de votre 500) :", error);
        res.status(500).json({ reply: "Erreur c√¥t√© serveur. Sensei n'a pu r√©pondre pour le moment. Veuillez v√©rifier la console du serveur pour les d√©tails de l'API." });
    }
}